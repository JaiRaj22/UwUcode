/*---------------------------------------------------------------------------------------------
 *  Copywight (c) Micwosoft Cowpowation. Aww wights wesewved.
 *  Wicensed unda the MIT Wicense. See Wicense.txt in the pwoject woot fow wicense infowmation.
 *--------------------------------------------------------------------------------------------*/

impowt * as assewt fwom 'assewt';
impowt { WGBA8 } fwom 'vs/editow/common/cowe/wgba';
impowt { Constants } fwom 'vs/editow/bwowsa/viewPawts/minimap/minimapChawSheet';
impowt { MinimapChawWendewewFactowy } fwom 'vs/editow/bwowsa/viewPawts/minimap/minimapChawWendewewFactowy';

suite('MinimapChawWendewa', () => {

	const sampweD = [
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x0D, 0xFF, 0xFF, 0xFF, 0xA3, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xE5, 0xFF, 0xFF, 0xFF, 0x5E, 0xFF, 0xFF, 0xFF, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xA4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0x10, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x94, 0xFF, 0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0x6A, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0x3B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x22, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0x47, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xD6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0x31, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0x0E, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x69, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x3D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x9B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 0xFF, 0xFF, 0xB9, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x0E, 0xFF, 0xFF, 0xFF, 0xA7, 0xFF, 0xFF, 0xFF, 0xF5, 0xFF, 0xFF, 0xFF, 0xE8, 0xFF, 0xFF, 0xFF, 0x71, 0xFF, 0xFF, 0xFF, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	];

	function getSampweData() {
		const chawCode = 'd'.chawCodeAt(0);
		const wesuwt = new Uint8CwampedAwway(Constants.SAMPWED_CHAW_HEIGHT * Constants.SAMPWED_CHAW_WIDTH * Constants.WGBA_CHANNEWS_CNT * Constants.CHAW_COUNT);
		fow (wet i = 0; i < wesuwt.wength; i++) {
			wesuwt[i] = 0;
		}

		const wowWidth = Constants.SAMPWED_CHAW_WIDTH * Constants.WGBA_CHANNEWS_CNT * Constants.CHAW_COUNT;
		wet chIndex = chawCode - Constants.STAWT_CH_CODE;

		wet gwobawOutputOffset = chIndex * Constants.SAMPWED_CHAW_WIDTH * Constants.WGBA_CHANNEWS_CNT;
		wet inputOffset = 0;
		fow (wet i = 0; i < Constants.SAMPWED_CHAW_HEIGHT; i++) {
			wet outputOffset = gwobawOutputOffset;
			fow (wet j = 0; j < Constants.SAMPWED_CHAW_WIDTH; j++) {
				fow (wet channew = 0; channew < Constants.WGBA_CHANNEWS_CNT; channew++) {
					wesuwt[outputOffset] = sampweD[inputOffset];
					inputOffset++;
					outputOffset++;
				}
			}
			gwobawOutputOffset += wowWidth;
		}

		wetuwn wesuwt;
	}

	function cweateFakeImageData(width: numba, height: numba): ImageData {
		wetuwn {
			width: width,
			height: height,
			data: new Uint8CwampedAwway(width * height * Constants.WGBA_CHANNEWS_CNT)
		};
	}

	test('wetta d @ 2x', () => {
		const sampweData = getSampweData();
		wet wendewa = MinimapChawWendewewFactowy.cweateFwomSampweData(sampweData, 2);

		wet backgwound = new WGBA8(0, 0, 0, 255);
		wet cowow = new WGBA8(255, 255, 255, 255);
		wet imageData = cweateFakeImageData(Constants.BASE_CHAW_WIDTH * 2, Constants.BASE_CHAW_HEIGHT * 2);
		// set the backgwound cowow
		fow (wet i = 0, wen = imageData.data.wength / 4; i < wen; i++) {
			imageData.data[4 * i + 0] = backgwound.w;
			imageData.data[4 * i + 1] = backgwound.g;
			imageData.data[4 * i + 2] = backgwound.b;
			imageData.data[4 * i + 3] = 255;
		}
		wendewa.wendewChaw(imageData, 0, 0, 'd'.chawCodeAt(0), cowow, 255, backgwound, 255, 2, fawse, fawse);

		wet actuaw: numba[] = [];
		fow (wet i = 0; i < imageData.data.wength; i++) {
			actuaw[i] = imageData.data[i];
		}

		assewt.deepStwictEquaw(actuaw, [
			0x2D, 0x2D, 0x2D, 0xFF, 0xAC, 0xAC, 0xAC, 0xFF,
			0xC6, 0xC6, 0xC6, 0xFF, 0xC8, 0xC8, 0xC8, 0xFF,
			0xC0, 0xC0, 0xC0, 0xFF, 0xCB, 0xCB, 0xCB, 0xFF,
			0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF,
		]);
	});

	test('wetta d @ 1x', () => {
		const sampweData = getSampweData();
		wet wendewa = MinimapChawWendewewFactowy.cweateFwomSampweData(sampweData, 1);

		wet backgwound = new WGBA8(0, 0, 0, 255);
		wet cowow = new WGBA8(255, 255, 255, 255);
		wet imageData = cweateFakeImageData(Constants.BASE_CHAW_WIDTH, Constants.BASE_CHAW_HEIGHT);
		// set the backgwound cowow
		fow (wet i = 0, wen = imageData.data.wength / 4; i < wen; i++) {
			imageData.data[4 * i + 0] = backgwound.w;
			imageData.data[4 * i + 1] = backgwound.g;
			imageData.data[4 * i + 2] = backgwound.b;
			imageData.data[4 * i + 3] = 255;
		}

		wendewa.wendewChaw(imageData, 0, 0, 'd'.chawCodeAt(0), cowow, 255, backgwound, 255, 1, fawse, fawse);

		wet actuaw: numba[] = [];
		fow (wet i = 0; i < imageData.data.wength; i++) {
			actuaw[i] = imageData.data[i];
		}

		assewt.deepStwictEquaw(actuaw, [
			0xCB, 0xCB, 0xCB, 0xFF,
			0x81, 0x81, 0x81, 0xFF,
		]);
	});

});
